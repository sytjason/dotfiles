(defwidget bar []
    (centerbox :orientation "h"
        (workspaces)
        (windows)
        (sidestuff)
    )
)

(defwindow mywindow
    :geometry (geometry :x "0%"
                        :y "0%"
                        :width "100%"
                        :height "1.5%"
                        :anchor "top center")
    :exclusive true
    (bar))


(defwidget sidestuff []
    (box :class "sidestuff"
         :orientation "h"
         :space-evenly false
         :halign "end"
         :spacing 5
        (systray :spacing 5
                 :orientation "horizontal"
                 :icon-size 20
        )
        (volume)
        (network)
        (battery)
        (time)
        (record)
    )
)

(deflisten var_workspaces        :initial "[]"   "bash scripts/get-workspaces.sh")
(deflisten active_workspace      :initial "0"    "bash scripts/get-active-workspace.sh")
(deflisten special_workspace     :initial "0"    "bash scripts/get-special-workspace.sh")
(deflisten var_windows           :initial "[]"   "bash scripts/get-windows.sh")
(deflisten active_window         :initial "null" "bash scripts/get-active-window.sh")
(deflisten conn_type             :initial ""     "bash scripts/get-conn-type.sh")
(deflisten net_state             :initial ""     "bash scripts/get-net-status.sh start")
(deflisten var_volume            :initial "0"    "bash scripts/get-volume.sh")

(defpoll cur_time    :interval "1m" :initial "0-0" "bash scripts/get-time.sh time")
(defpoll bat_percent :interval "1m" :initial "0"   "bash scripts/get-bat.sh percent")

(defwidget workspaces []
    (box :spacing 0
        :orientation "horizontal"
        :space-evenly false
        (label :text "${var_workspaces}${active_workspace}${special_workspace}" :visible false)
        (for workspace in var_workspaces
            (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
                (box :visible "${(workspace.windows > 0 && workspace.id > 0) || workspace.id == active_workspace}"
                    (label :limit-width 2
                        :text "${workspace.id}"
                        :class "workspace-entry ${workspace.id == active_workspace ? special_workspace != 0 ? "magic" : "active" : "inactive"}"
                    )
                )
            )
        )
    )
)

(defwidget windows []
    (box :spacing 0
        :orientation "horizontal"
        :space-evenly false
        (label :text "${active_workspace}${active_window}${var_windows}" :visible false)
        (for window in var_windows
            (eventbox :onclick "hyprctl dispatch focuswindow 'address:${window.address}'"
                (box :visible "${window.wid == active_workspace}"
                    (label :text "${window.class}"
                        :class "window-entry ${window.address == active_window ? "active" : "inactive"}"
                    )
                )
            )
        )
    )
)

(defvar hov_net false)
(defwidget network []
    (eventbox :onclick "bash scripts/start-netconfigure.sh"
              :onhover     "eww update hov_net=true"
              :onhoverlost "eww update hov_net=false"
        (box :space-evenly false
            (image :path "network/${conn_type}.svg"
                   :preserve-aspect-ratio true
                   :image-width 20
            )
            (revealer :transition "slideleft"
                      :reveal "${hov_net && conn_type != "offline"}"
                      :duration "250ms"
                (box
                    (label :text "${net_state}")
                )
            )
        )
    )
)

(defvar hov_bat false)
(defvar bat_detail "")
(defwidget battery []
    (eventbox :onhover     "eww update hov_bat=true bat_detail=\"$(scripts/get-bat.sh all)\""
              :onhoverlost "eww update hov_bat=false"
        (box :space-evenly false
             :margin-left 10
            (label :text "${bat_percent}" :visible false)
            (image :path "battery/${bat_percent}.svg"
                   :preserve-aspect-ratio true
                   :image-width 25
            )
            (revealer :transition "slideleft"
                      :reveal hov_bat
                      :duration "250ms"
                (box
                    (label :text "${bat_detail}")
                )
            )
        )
    )
)

(defvar hov_time false)
(defvar datetime "")
(defwidget time []
    (eventbox :onhover     "eww update hov_time=true datetime=\"$(scripts/get-time.sh all)\""
              :onhoverlost "eww update hov_time=false"
        (box :space-evenly false
            (label :text "${cur_time}" :visible false)
            (image :path "clock/${cur_time}.svg"
                   :preserve-aspect-ratio true
                   :image-width 20
            )
            (revealer :transition "slideleft"
                      :reveal hov_time
                      :duration "250ms"
                (box
                    (label :text "${datetime}")
                )
            )
        )
    )
)

(defvar show_rec false)
(defvar blink_rec true)
(defwidget record []
    (revealer :transition "none"
              :reveal show_rec
        (box :width 20
            (revealer :transition "crossfade"
                      :reveal blink_rec
                      :duration "250ms"
                (image :path "record/rec.svg"
                       :preserve-aspect-ratio true
                       :image-width 20
                )
            )
        )
    )
)

(defwidget volume []
    (box :width 20
        (label :text "${var_volume}" :visible false)
        (image :path "volume/volume-${(var_volume.volume == 0 || var_volume.mute) ? "no" : var_volume.volume > 0 && var_volume.volume < 50 ? "low" : "high"}.svg"
               :preserve-aspect-ratio true
               :image-width 20
        )
    )
)
